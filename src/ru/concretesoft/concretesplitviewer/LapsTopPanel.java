/*
 * LapsTopPanel.java
 *
 * Created on 22 Май 2007 г., 21:31
 */

package ru.concretesoft.concretesplitviewer;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import javax.swing.event.ListDataEvent;
import javax.swing.event.ListDataListener;

/**
 *
 * @author  Mytinski Leonid
 *
 * Panel show all laps as bricks with same heigths and length relate to size of lap. Color of filling brick means selected or not it lap.
 */
public class LapsTopPanel extends javax.swing.JPanel implements ListDataListener,MouseListener{
    private AthleteListModel model;
    private int[] xCoord;
    private boolean[] selected;
    /** Creates new form LapsTopPanel */
    private LapsTopPanel() {
        
    }
    public LapsTopPanel(AthleteListModel model) {
        setModel(model);
        xCoord = null;
        this.addMouseListener(this);
    }
    public void paint(Graphics g){
        
        Graphics2D g2 = (Graphics2D) g;
        Dimension d = getSize();
        double width = d.getWidth();
        double height = d.getHeight();
        g2.setPaint(Color.WHITE);
        g2.fillRect(0, 0, (int) width, (int) height);
        if((model!=null)&&(model.getDistance()!=null)){
            int otst;
            FontMetrics fM = g2.getFontMetrics();
            otst = fM.stringWidth("-000:00")+5;
            int allLength = model.getDistance().getLength();
            double scale = (width-otst) / allLength;
            int nOfCp = model.getDistance().getNumberOfCP();
            xCoord = new int[nOfCp+1];
            
            //Creating boolean array of selected laps
            selected = new boolean[nOfCp];
            for(boolean b:selected){
                b=false;
            }
            int[] viewSplits = model.getViewingSplits();
            for(int i: viewSplits){
                selected[i-1]=true;
            }

            
            int curX = otst;
            xCoord[0]=curX;
            for(int i = 0; i < nOfCp; i++){
                double w = model.getDistance().getLengthOfDist(i+1)*scale;
                g2.setPaint(Color.BLACK);
                g2.drawLine(curX+(int)w,0,curX+(int)w,(int)height);
                if(selected[i])
                    g2.setPaint(Color.GREEN);
                else
                    g2.setPaint(Color.RED);
                g2.fillRect(curX+1,0,(int)w-1,(int)height);
                curX=curX+(int)w;
                xCoord[i+1]=curX;
            }
        }else;
    }
    /** Sets model
     *
     * @param  a  <code>AthleteListModel</code> model
     */
    public void setModel(AthleteListModel a){
        model = a;
        model.addListDataListener(this);
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());

    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    public void intervalAdded(ListDataEvent e) {
    }

    public void intervalRemoved(ListDataEvent e) {
    }

    public void contentsChanged(ListDataEvent e) {
        repaint();
    }

    public void mouseClicked(MouseEvent e) {
        int x = e.getX();
        if(xCoord[0]<x){
            for(int i=1;i<xCoord.length;i++){
                if(xCoord[i]>x){
                    if(selected[i-1]) 
                        model.removeSplitsForN(i);
                    else
                        model.addSplitsForN(i);
                    break;
                }else;
            }
        }
    }

    public void mousePressed(MouseEvent e) {
    }

    public void mouseReleased(MouseEvent e) {
    }

    public void mouseEntered(MouseEvent e) {
    }

    public void mouseExited(MouseEvent e) {
    }
    
}
