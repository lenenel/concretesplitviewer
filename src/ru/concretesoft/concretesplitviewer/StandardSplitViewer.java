/*
 * StandardSplitViewer.java
 *
 * Created on 28 Июнь 2006 г., 13:07
 */

package ru.concretesoft.concretesplitviewer;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.Iterator;
import java.util.Vector;
import javax.swing.event.ListDataEvent;
import javax.swing.event.ListDataListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import ru.spb.ConcreteSoft.tipWindow.MouseMoveQueue;
import ru.spb.ConcreteSoft.tipWindow.TipWindow;


/**
 *
 * @author Мытинский Леонид
 *
 * Панель для отображения сплитов в стандартном виде
 */
public class StandardSplitViewer extends javax.swing.JPanel implements SplitViewer,ListDataListener,ListSelectionListener, MouseListener{
    private AthleteListModel aModel;
    private int[] xCoord;
    private int otst=5;
    private int heightStr=5;
    private TipWindow tipWindow;
    private TipThreadSplitViewer tipThread;

   
    /**
     * Creates new form StandardSplitViewer
     */
    public StandardSplitViewer() {
        tipWindow = new TipWindow();
        initComponents();
        addMouseMotionListener(MouseMoveQueue.getInstance());
        addMouseListener(this);
//        tipWindow = new TipWindow();
//        tipWindow.setVisible(true);
        
    }
//    public boolean setColorSheme(Color[] c){
//        if((c==null)||(c.length!=aModel.getAthletes().size())){
//            int size = aModel.getAthletes().size();
//            colorSheme = new Color[size];
//            for(int i=0;i<size;i++){
//                colorSheme[i]=convertToColor( i*( 1024 / size ));
//            }
//            return false;
//        }
//        colorSheme = c;
//        return true;
//    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.GridBagLayout());

    }// </editor-fold>//GEN-END:initComponents
    public void paint(Graphics g){
        Graphics2D g2 = (Graphics2D)g;
        Dimension d = getSize();
        g2.setPaint(Color.WHITE);
        g2.fillRect(0,0,d.width,d.height);
        FontMetrics fM = g2.getFontMetrics();
        heightStr =  fM.getHeight();
        otst = fM.stringWidth("-000:00")+5;
        int width = d.width-otst;
        int height = d.height-heightStr-2;
        AthleteIcon[] athletes = (AthleteIcon[])(aModel.getSelectedValues());
        int[] spl = aModel.getViewingSplits();
        Distance dist = aModel.getDistance();
        int size = athletes.length;
        
//        if(colorSheme==null) setColorSheme(null);
        
        if((spl!=null)&&(size>0)){
            
            xCoord = new int[spl.length];
            if(dist!=null){
                int totDist = Tools.calculatTotalLength(dist, spl);
                int curDist=otst;
                for(int i=0;i<spl.length;i++){
                    xCoord[i]=curDist + (int)((dist.getLengthOfDist(spl[i])/(double)totDist)*width);
                    curDist = xCoord[i];
                }
            } else {
                int sizeLap = width/spl.length;
                for(int i=0;i<spl.length;i++)
                    xCoord[i] = sizeLap*(i+1);
                int diff = width-spl.length*sizeLap;
            }
            g2.setPaint(Color.BLACK);
            for(int i=0;i<spl.length;i++){
                g2.drawLine(xCoord[i],0,xCoord[i],height);
                String s;
                if(i<=(spl.length-2)){
                    int diff = spl[i+1]-spl[i];
                    if(diff>1) s = spl[i]+"-"+(spl[i+1]-1);
                    else s=spl[i]+"";
                } else {
                    s= (spl[i]==dist.getNumberOfCP())? java.util.ResourceBundle.getBundle("ru/concretesoft/concretesplitviewer/i18on").getString("Finish"): "";
    //                if(spl[i]==dist.getNumberOfCP()) s=java.util.ResourceBundle.getBundle("ru/concretesoft/concretesplitviewer/i18on").getString("Finish");
    //                else s = spl[i]+"";
                }
                    g2.drawString(s,xCoord[i]-fM.stringWidth(s)/2,height+fM.getHeight()+1);
            }
            g2.setPaint(Color.RED);
            int yMax = athletes[size-1].getTotalTime().getTimeInSeconds();
//            int nT = 10;
//            double stepTime = yMax / (double)nT;
            
            int hTime = fM.getHeight();
            double stepTime = 30.0;
            int nT =(int) (yMax/stepTime);
            while((height/nT)<(hTime+10)){
                stepTime*=2;
                nT = (int) (yMax/stepTime);
            }
            Time tmp = new Time(0,2);
//            tmp.setTimeInSeconds(Math.abs(yMin));
            String s = tmp.getTimeString();
            g2.setPaint(Color.BLACK);
            g2.drawString(s,otst-fM.stringWidth(s),height+1);
             float dash1[] = {10.0f};
            BasicStroke dashed = new BasicStroke(1.0f, 
                                                  java.awt.BasicStroke.CAP_BUTT, 
                                                  java.awt.BasicStroke.JOIN_MITER, 
                                                  10.0f, dash1, 0.0f);
            g2.setStroke(dashed);
            for(int i=1;i<nT;i++){
                int timeCur = Math.abs((int)(stepTime*i));
                
                tmp.setTimeInSeconds(timeCur);
                s = tmp.getTimeString();
                int yH = height - (int)((stepTime*i / yMax)*height);
                g2.setPaint(Color.BLACK);
                g2.drawString(s,otst-fM.stringWidth(s),yH);
               
                g2.setPaint(Color.LIGHT_GRAY);
                g2.drawLine(otst,yH,otst + width,yH);
            }
            
                
            tmp.setTimeInSeconds((int)(stepTime*nT));
            s = tmp.getTimeString();
            
            g2.setPaint(Color.BLACK);
            g2.drawString(s,otst-fM.stringWidth(s),hTime+1);
            int yH = height - (int)((stepTime*nT / yMax)*height);
            g2.setPaint(Color.LIGHT_GRAY);
            g2.drawLine(otst,yH,otst + width,yH);
            
            
            g2.setStroke(new BasicStroke(1.0f));

            for(int j=0;j<size;j++){
                g2.setPaint(athletes[j].getColor());
                
                Athlete tmpA = athletes[j].getAthlete();
    //            g2.setPaint(new Color());
                int x = xCoord[0];
                int y = height - (int)((tmpA.getLap(spl[0]).getTimeInSeconds() / (double)yMax)*height);
                int totTime = tmpA.getLap(spl[0]).getTimeInSeconds();
                g2.drawLine(otst,height,x,y);
                for(int i=1;i<spl.length;i++){
                    int x1 = xCoord[i];
                    if (tmpA.getLap(spl[i]).getTimeInSeconds()==0) break;
                    totTime += tmpA.getLap(spl[i]).getTimeInSeconds();
                    int y1 = height - (int)(( totTime / (double)yMax)*height);
                    g2.drawLine(x,y,x1,y1);
                    x=x1;
                    y=y1;
                }
            }
        }else{
            xCoord=null;
        }
        
    }
    private Color convertToColor(int c){
        if(c<=255)
            return new Color(255,c,0);
        if(c<=511)
            return new Color(511-c,255,0);
        if(c<=767)
            return new Color(0,255,c-511);
        if(c<=1023)
            return new Color(0,1021-c,255);
        return null;
    }
    public String toString(){
        return java.util.ResourceBundle.getBundle("ru/concretesoft/concretesplitviewer/i18on").getString("Standart_View");
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    public void removeSplit(int x) {
        
        
        if(xCoord!=null){
            for(int i=0;i<xCoord.length;i++){
                if(x<xCoord[i]){
                    aModel.removeSplitsForN(aModel.getViewingSplits()[i]);
                    break;
                }
            }
        }
    }
    public void setModel(AthleteListModel aM){
        aModel = aM;
        aM.addListDataListener(this);
        aM.addListSelectionListener(this);
    }
    public AthleteListModel getModel(){
        return aModel;
    }
    public int getSplit(Point p){
        if(xCoord!=null){
            for(int i=0;i<xCoord.length; i++){
                if(p.getX()<xCoord[i]){
                    return aModel.getViewingSplits()[i];
                }else;
            }
        }else{
            return -1;
        }
        return -1;
    }


    public void intervalAdded(ListDataEvent e) {
        contentsChanged(e);
    }

    public void intervalRemoved(ListDataEvent e) {
        contentsChanged(e);
    }

    public void contentsChanged(ListDataEvent e) {
        repaint();
    }

    public void valueChanged(ListSelectionEvent e) {
        repaint();
    }

    public void mouseClicked(MouseEvent evt) {
        if((evt.getButton()==evt.BUTTON2)||(evt.getMouseModifiersText(evt.getModifiers()).equals("Shift+Button1"))){
            aModel.restoreAllSplits();
        }
        else if(evt.getButton()==evt.BUTTON1){
            
            removeSplit(evt.getX());
        }
    }

    public void mousePressed(MouseEvent e) {
    }

    public void mouseReleased(MouseEvent e) {
    }

    public void mouseEntered(MouseEvent e) {
        tipThread = new TipThreadSplitViewer(tipWindow, this);
        tipThread.start();
    }

    public void mouseExited(MouseEvent e) {
        tipThread.finish();
    }
    
}
